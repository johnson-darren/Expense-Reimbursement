@page "/"
@rendermode InteractiveServer

@using Expenses_WebApp.Data
@using Expenses_WebApp.Data.DataModels
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h4">Select or Create a User</MudText>

    @if (users.Count == 0)
    {
        <MudText>No Users Available. Please create a new user.</MudText>
        <MudButton OnClick="ToggleCreateUserForm" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">
            Create New User
        </MudButton>
    }
    else if (isCreatingNewUser)
    {
        <MudPaper Class="p-4 mt-4">
            <MudForm @ref="form" Model="newUser" OnValidSubmit="CreateNewUser">
                <MudTextField T="string" Label="First Name" For="@(() => newUser.First_Name)" />
                <MudTextField T="string" Label="Last Name" For="@(() => newUser.Last_Name)" />
                <MudTextField T="string" Label="Email" For="@(() => newUser.Email)" />

                <MudSelect T="int" Label="Department" @bind-Value="newUser.Department_ID" Required="true">
                    @foreach (var department in departments)
                    {
                        <MudSelectItem Value="@department.Department_ID">@department.Department_Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="int" Label="Role" @bind-Value="newUser.Role_ID" Required="true">
                    @foreach (var role in roles)
                    {
                        <MudSelectItem Value="@role.Role_ID">@role.Role_Name</MudSelectItem>
                    }
                </MudSelect>

                <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3">
                    Create User
                </MudButton>
            </MudForm>
        </MudPaper>
    }
    else
    {
        <MudSelect T="int" Label="Select Existing User" @bind-Value="selectedUserId" Class="mt-4" Required="true">
            @foreach (var user in users)
            {
                <MudSelectItem Value="@user.User_ID">@user.First_Name @user.Last_Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton OnClick="SelectUser" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">
            Continue
        </MudButton>
    }

    @if (isCreatingNewUser)
    {
        <MudButton OnClick="ToggleCreateUserForm" Class="mt-4">
            Cancel
        </MudButton>
    }
</MudContainer>

@code {
    private bool isCreatingNewUser = false;
    private User newUser = new();
    private int selectedUserId;
    private List<User> users = new();
    private List<Department> departments = new();
    private List<Role> roles = new();
    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            departments = await DbContext.Departments.ToListAsync();
            roles = await DbContext.Roles.ToListAsync();
            users = await DbContext.Users.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void ToggleCreateUserForm()
    {
        isCreatingNewUser = !isCreatingNewUser;
    }

    private async Task CreateNewUser()
    {
        await form.Validate();

        if (!form.IsValid)
            return;

        DbContext.Users.Add(newUser);
        await DbContext.SaveChangesAsync();

        users = await DbContext.Users.ToListAsync();
        isCreatingNewUser = false;
        newUser = new(); // Reset form
    }

    private void SelectUser()
    {
        var selectedUser = users.FirstOrDefault(u => u.User_ID == selectedUserId);
        if (selectedUser != null)
        {
            // Navigate or continue logic here
        }
    }
}
